
language: cpp
sudo: required

matrix:
  include:
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.8
            - lcov
            - libpng-dev
            - libjpeg8-dev
            - libtiff4-dev
            - libxxf86vm1
            - libxxf86vm-dev
            - libtbb-dev
            - x11proto-xf86vidmode-dev
            - libxrandr-dev
            - libatlas-base-dev
      env: CXX_COMPILER=g++-4.8 C_COMPILER=gcc-4.8 TOOLSET=gcc VISUAL_DEBUG=ON CCTAG_SERIALIZE=ON WITH_CUDA=ON
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.8
            - lcov
            - libpng-dev
            - libjpeg8-dev
            - libtiff4-dev
            - libxxf86vm1
            - libxxf86vm-dev
            - libtbb-dev
            - x11proto-xf86vidmode-dev
            - libxrandr-dev
            - libatlas-base-dev
      env: CXX_COMPILER=g++-4.8 C_COMPILER=gcc-4.8 TOOLSET=gcc VISUAL_DEBUG=OFF CCTAG_SERIALIZE=ON WITH_CUDA=OFF
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.8
            - lcov
            - libpng-dev
            - libjpeg8-dev
            - libtiff4-dev
            - libxxf86vm1
            - libxxf86vm-dev
            - libtbb-dev
            - x11proto-xf86vidmode-dev
            - libxrandr-dev
            - libatlas-base-dev
      env: CXX_COMPILER=g++-4.8 C_COMPILER=gcc-4.8 TOOLSET=gcc VISUAL_DEBUG=OFF CCTAG_SERIALIZE=OFF WITH_CUDA=ON
    - compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.7
          packages:
            - clang-3.7
            - lcov
            - libpng-dev
            - libjpeg8-dev
            - libtiff4-dev
            - libxxf86vm1
            - libxxf86vm-dev
            - libtbb-dev
            - x11proto-xf86vidmode-dev
            - libxrandr-dev
            - libatlas-base-dev
      # clang is not supported in cuda 7.0
      env: CXX_COMPILER=clang++-3.7 C_COMPILER=clang-3.7 TOOLSET=clang VISUAL_DEBUG=ON CCTAG_SERIALIZE=ON WITH_CUDA=OFF

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      # - cmake
      - lcov
      - libpng-dev
      - libjpeg8-dev
      - libtiff4-dev
      - libxxf86vm1
      - libxxf86vm-dev
      - libtbb-dev
      - x11proto-xf86vidmode-dev
      - libxrandr-dev
      # - g++-4.8
      - libatlas-base-dev

env:
  global:
    - NUM_CPU="`grep processor /proc/cpuinfo | wc -l`"; echo $NUM_CPU
    - BUILD_TYPE="RELEASE"
    - BUILD_SYSTEM="`uname -s`"
    - BUILD_PROCESSOR="`uname -p`"
    - CCTAG_SOURCE=${TRAVIS_BUILD_DIR}
    - CCTAG_BUILD=${TRAVIS_BUILD_DIR}/build
    - CCTAG_INSTALL=${CCTAG_BUILD}/install
    - CCTAG_SOURCE_APP=$CCTAG_SOURCE/src/applications
    - CCTAG_BUILD_APP=${CCTAG_SOURCE_APP}/build
    # OPENCV
    - OPENCV_ROOT=${HOME}/opencv3
    - OPENCV_SOURCE=${OPENCV_ROOT}/source
    - OPENCV_CONTRIB=${OPENCV_ROOT}/contrib
    - OPENCV_BUILD=${OPENCV_ROOT}/build
    - OPENCV_INSTALL=${OPENCV_ROOT}/install
    # EIGEN
    - EIGEN_INSTALL=${HOME}/eigen
    # BOOST
    - BOOST_ROOT=${HOME}/boost
    - BOOST_SOURCE=${BOOST_ROOT}/source
    - BOOST_INSTALL=${BOOST_ROOT}/install
    # CMAKE
    - CMAKE_URL="https://cmake.org/files/v3.6/cmake-3.6.1-Linux-x86_64.tar.gz"
    - CMAKE_ROOT=${HOME}/cmake
    - CMAKE_SOURCE=${CMAKE_ROOT}/source
    - CMAKE_INSTALL=${CMAKE_ROOT}/install

before_install:
 - gem install coveralls-lcov
 # OPENCV
 - >
    if [ "$(ls -A $OPENCV_INSTALL)" ]; then
      echo "OpenCV found in cache.";
    else
      mkdir --parent $OPENCV_SOURCE
      mkdir --parent $OPENCV_BUILD
      mkdir --parent $OPENCV_INSTALL
      git clone --recursive --branch 3.0.0 --depth 1 https://github.com/Itseez/opencv.git $OPENCV_SOURCE;
    fi
 # EIGEN
 - >
    if [ "$(ls -A $EIGEN_INSTALL)" ]; then
      echo "Eigen found in cache.";
    else
      mkdir --parent $EIGEN_INSTALL
      hg clone -r 3.2.8 https://bitbucket.org/eigen/eigen/ $EIGEN_INSTALL;
    fi 
 # BOOST
 - >
    if [ "$(ls -A $BOOST_INSTALL)" ]; then
      echo "Boost found in cache.";
    else
      mkdir --parent $BOOST_SOURCE
      mkdir --parent $BOOST_INSTALL
      travis_retry wget https://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.gz;
      tar -xf boost_1_58_0.tar.gz;
      cp -r boost_1_58_0/* $BOOST_SOURCE;
    fi 
 # CMAKE most recent version
 - >
    if [ "$(ls -A ${CMAKE_INSTALL})" ]; then
      echo "CMake found in cache.";
      ls -A ${CMAKE_INSTALL}
      export PATH=${CMAKE_INSTALL}/bin:${PATH};
      cmake --version
    else
      mkdir --parent ${CMAKE_SOURCE}
      mkdir --parent ${CMAKE_INSTALL}
      ls -A ${CMAKE_INSTALL}
      travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${CMAKE_INSTALL}
      export PATH=${CMAKE_INSTALL}/bin:${PATH};
      cmake --version
    fi

install:
  # CUDA (only if needed)
  - >
     if [ "${WITH_CUDA}" = "ON" ]; then
       CUDA_REPO_PKG=cuda-repo-ubuntu1404_7.0-28_amd64.deb;
       travis_retry wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/$CUDA_REPO_PKG
       sudo dpkg -i $CUDA_REPO_PKG;
       rm $CUDA_REPO_PKG;
       sudo apt-get -y update;
       CUDA_PKG_VERSION="7-0";
       CUDA_VERSION="7.0";
       sudo apt-get install -y --no-install-recommends  cuda-core-$CUDA_PKG_VERSION  cuda-cudart-dev-$CUDA_PKG_VERSION  cuda-cublas-dev-$CUDA_PKG_VERSION cuda-curand-dev-$CUDA_PKG_VERSION
       sudo ln -s /usr/local/cuda-$CUDA_VERSION /usr/local/cuda;
     fi
  # OPENCV
  - >
     if [ ! "$(ls -A $OPENCV_INSTALL)" ]; then
       cd $OPENCV_BUILD
       cmake \
         -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
         -DCMAKE_C_COMPILER=$C_COMPILER \
         -DCMAKE_BUILD_TYPE=Release \
         -DCMAKE_INSTALL_PREFIX=$OPENCV_INSTALL \
         -DWITH_CUDA=OFF \
         -DBUILD_opencv_ts=0 \
         $OPENCV_SOURCE;
       make -j 2 > null;
       make install;
     fi
  # BOOST
  - >
     if [ ! "$(ls -A $BOOST_INSTALL)" ]; then
       cd $BOOST_SOURCE
       ./bootstrap.sh --with-toolset=${TOOLSET} --with-libraries=date_time,chrono,thread,serialization,system,filesystem,atomic,program_options,timer --prefix=$BOOST_INSTALL;
       ./b2 link=shared install > null;
     fi

before_script:
  # Create build folder
  - mkdir $CCTAG_BUILD
  - cd $CCTAG_BUILD
  # Classic release build
  - >
     cmake \
       -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
       -DCMAKE_C_COMPILER=$C_COMPILER \
       -DCMAKE_INSTALL_PREFIX=$CCTAG_INSTALL \
       -DWITH_CUDA=$WITH_CUDA \
       -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
       -DOpenCV_DIR=$OPENCV_INSTALL/share/OpenCV \
       -DEigen_INCLUDE_DIR_HINTS=$EIGEN_INSTALL \
       -DBOOST_ROOT=$BOOST_INSTALL \
       -DVISUAL_DEBUG=$VISUAL_DEBUG \
       -DCCTAG_SERIALIZE=$CCTAG_SERIALIZE \
       . $CCTAG_SOURCE

script:
# limit GCC builds to a reduced number of thread for the virtual machine
  - make install -j 2 VERBOSE=1
# Perform unit tests
  # - make test

  # Test if it compiles as third party
  - cd $CCTAG_SOURCE_APP
  - mkdir --parent $CCTAG_BUILD_APP
  - cd $CCTAG_BUILD_APP
  - >
     cmake -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
       -DCMAKE_C_COMPILER=$C_COMPILER \
       -DCCTag_DIR=/$CCTAG_INSTALL/lib/cmake/CCTag/ \
       -DOpenCV_DIR=$OPENCV_INSTALL/share/OpenCV \
       -DBOOST_ROOT=$BOOST_INSTALL \
       -DCMAKE_INSTALL_PREFIX=`pwd`/install \
       . $CCTAG_SOURCE_APP
  - make install -j 2 VERBOSE=1

after_success:
  - du -hs $OPENCV_INSTALL

cache:
  directories:
    - $OPENCV_INSTALL
    - $BOOST_INSTALL
    - $EIGEN_INSTALL
    - $CMAKE_INSTALL
